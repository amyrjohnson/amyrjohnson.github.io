<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron&nbsp;School | Blog Title]]></title>
  <link href="http://amyrjohnson.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://amyrjohnson.github.io/"/>
  <updated>2014-06-12T16:27:50-04:00</updated>
  <id>http://amyrjohnson.github.io/</id>
  <author>
    <name><![CDATA[Amy Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matrices in Ruby]]></title>
    <link href="http://amyrjohnson.github.io/blog/2014/06/11/my-first-post-on-octopress/"/>
    <updated>2014-06-11T13:05:08-04:00</updated>
    <id>http://amyrjohnson.github.io/blog/2014/06/11/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Ruby has a matrix library that can be used to do simple matrix math. Matrices have their own class with instance methods like transpose, rank, and determinant. One relevant use case of the Matrix class would be in implementing linear regression with a least squares cost function</p>

<p> For example, say you have some housing data on recently sold homes: the square footage, number of bathrooms, and price. If you wanted to predict price another house might sell for, you could use the Ruby Matrix class to figure it out.</p>

<p>In linear regression we attempt to express our independent variable (in this case, housing price), as a linear combination of the dependent variables (bathrooms and square footage) plus some constant.</p>

<pre><code>    f(x,y) = ax + by + c
</code></pre>

<p>The difference between what our equation predicts the home price to be and the actual price the home sold for is the error. In order to determine the values of a, b, and c that make the most sense, we choose the values that minimize the average squared error. If the data can be expressed as an invertible matrix, there is an easy formula to get the right values:</p>

<pre><code>    w = (X&lt;sup&gt;T&lt;/sup&gt;X)&lt;sup&gt;-1&lt;/sup&gt;X&lt;sup&gt;T&lt;/sup&gt;b 
</code></pre>

<p>where w is the matrix containing the coefficients a, b, and c, X represents the dependent variable matrix, and b represents the independent variable matrix.</p>

<p>With the Ruby Matrix library these manipulations will be easy. Creating matrices in Ruby is simple. First you need to add a line to require the Matrix library, and then you&rsquo;re ready to go. Ruby stores matrices as an array of rows, and all the rows must be the same length. Just like arrays, the indices of matrix rows and columns start at zero.</p>

<p> Matrices can be instantiated in a variety of different ways. I chose a straightforward way of simply listing out the rows as nested arrays.</p>

<p> ```ruby
 require &lsquo;matrix&rsquo;</p>

<pre><code>housing_data = Matrix[[1,4000,3], [1,3000,2], [1,3800,3], [1,3200,2], [1,3542,4], [1,2348,2],[1,2987,3],[1,4300,4],[1,3342,4],[1,3000,3]]

puts housing_data
</code></pre>

<p>returns:</p>

<p>```</p>

<p><code>ruby
housing_prices = Matrix[[400000],[310000],[375000],[315000],[350000],[250000],[300000],[450000],[360000],[320000]]
</code></p>

<table>
<thead>
<tr>
<th></th>
<th> Table  </th>
<th align="left"> Square Footage </th>
<th align="left"> # Bathrooms   </th>
<th align="left"> Price </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>        </td>
<td align="left">4000            </td>
<td align="left">3              </td>
<td align="left">400000 |</td>
</tr>
<tr>
<td></td>
<td>        </td>
<td align="left">3000            </td>
<td align="left">2              </td>
<td align="left">310000 |</td>
</tr>
<tr>
<td></td>
<td>        </td>
<td align="left">3800            </td>
<td align="left">3              </td>
<td align="left">375000 | </td>
</tr>
<tr>
<td></td>
<td>        </td>
<td align="left">3200            </td>
<td align="left">2              </td>
<td align="left">315000 |</td>
</tr>
<tr>
<td></td>
<td>        </td>
<td align="left">3542            </td>
<td align="left">4              </td>
<td align="left">350000 |</td>
</tr>
<tr>
<td></td>
<td>        </td>
<td align="left">2348            </td>
<td align="left">2              </td>
<td align="left">250000 |</td>
</tr>
<tr>
<td></td>
<td>        </td>
<td align="left">2987            </td>
<td align="left">3              </td>
<td align="left">300000 |</td>
</tr>
<tr>
<td></td>
<td>        </td>
<td align="left">4300            </td>
<td align="left">4              </td>
<td align="left">450000 |</td>
</tr>
<tr>
<td></td>
<td>        </td>
<td align="left">3342            </td>
<td align="left">4              </td>
<td align="left">360000 |</td>
</tr>
<tr>
<td></td>
<td>        </td>
<td align="left">3000            </td>
<td align="left">3              </td>
<td align="left">320000 |</td>
</tr>
</tbody>
</table>


<p>Above is some data I made up. The first matrix contains the housing data. Each row represents a house with square footage in column two and the number of bathrooms in column three. The constant value in column one is necessary for the calculation of the constant c from our previous equation. The second matrix contains the housing prices. These two matrices are all we need for our calculations.</p>

<p>```ruby
x_t = housing_data.transpose</p>

<p> => Matrix[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [4000, 3000, 3800, 3200, 3542, 2348, 2987, 4300, 3342, 3000], [3, 2, 3, 2, 4, 2, 3, 4, 4, 3]]
```</p>

<p> Ruby has a useful function that will transpose a matrix for you, as you can see above.</p>

<p>```ruby
 x_t_x = x_t * housing_data</p>

<p>  => Matrix[[10, 33519, 30], [33519, 115320001, 103193], [30, 103193, 96]]
```</p>

<p> The standard operators of <code>*, +, -, /,</code> and <code>**</code> perform the corresponding operations on matrices.
```ruby
 x_t_x.inverse</p>

<p>  => Matrix[[(421924847/108574934), (-61017/54287467), (-673863/108574934)], [(-61017/54287467), (30/54287467), (-13180/54287467)], [(-673863/108574934), (-13180/54287467), (29676649/108574934)]]
<code>
  The inverse function will inverse a matrix for you.
</code>ruby
w = (x_t_x.inverse * x_t) * housing_prices</p>

<p> => Matrix[[(1018615352500/54287467)], [(4850790000/54287467)], [(447540942500/54287467)]]
```</p>

<p>Those fractions are pretty huge, so let&rsquo;s iterate through the coefficient matrix and change them into integers to get a better idea of what&rsquo;s going on.</p>

<p>```
w.collect do |i|</p>

<pre><code>i.to_f.round(1)
</code></pre>

<p>end</p>

<p>=> Matrix[[18763.36], [89.35], [8243.91]]
```</p>

<p>Matrix.each reads left to right, then down the rows by default, but you can also specify options, for instance only reading down the diagonal (row index == column index). Since here we only have a simple 1x3 matrix, the default method works just fine. Rather than initializing and returning a new matrix, we can also just use the collect method in place of each to return the new matrix.</p>

<p>And there we have the coefficients in a matrix. As we would expect, both a and b are positive since higher square footage and more bathrooms are both associated with a higher price. In this example, blah blah blah.</p>

<p>And now you know how to use matrices in Ruby!</p>

<p>Test test test test</p>
]]></content>
  </entry>
  
</feed>
