<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron&nbsp;School | Blog Title]]></title>
  <link href="http://amyrjohnson.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://amyrjohnson.github.io/"/>
  <updated>2014-06-12T17:25:22-04:00</updated>
  <id>http://amyrjohnson.github.io/</id>
  <author>
    <name><![CDATA[Amy Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Matrices in Ruby]]></title>
    <link href="http://amyrjohnson.github.io/blog/2014/06/11/my-first-post-on-octopress/"/>
    <updated>2014-06-11T13:05:08-04:00</updated>
    <id>http://amyrjohnson.github.io/blog/2014/06/11/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Ruby has a matrix library that can be used to do simple matrix math. Matrices have their own class with instance methods like transpose, rank, and determinant. One relevant use case of the Matrix class would be in implementing linear regression with a least squares cost function</p>

<p> For example, say you have some housing data on recently sold homes: the square footage, number of bathrooms, and price. If you wanted to predict price another house might sell for, you could use the Ruby Matrix class to figure it out.</p>

<p>In linear regression we attempt to express our independent variable (in this case, housing price), as a linear combination of the dependent variables (bathrooms and square footage) plus some constant.</p>

<p><strong><center>f(x,y) = ax + by + c</center></strong></p>

<p>The difference between what our equation predicts the home price to be and the actual price the home sold for is the error. In order to determine the values of a, b, and c that make the most sense, we choose the values that minimize the average squared error. If the data can be expressed as an invertible matrix, there is an easy formula to get the right values:</p>

<p><strong><center>w = (X<sup>T</sup>X)<sup>-1</sup>X<sup>T</sup>b</center></strong></p>

<p>where w is the matrix containing the coefficients <code>a</code>, <code>b</code>, and <code>c</code>, <code>X</code> represents the dependent variable matrix, and <code>b</code> represents the independent variable matrix.</p>

<p>With the Ruby Matrix library these manipulations will be easy. Creating matrices in Ruby is simple. First add a line to require the Matrix library, and you&rsquo;re ready to get started. Ruby stores each matrix as an array of rows. Just like arrays, the indices of matrix rows and columns start at zero. Don&rsquo;t forget that all the rows must be the same length for the matrix to be valid.</p>

<p><code>
| ---- Table -- |  --  Square Footage -- |  -- # Bathrooms --  |  -- Price ---- |
|:-------------:|:----------------------:|:-------------------:|:--------------:|
|  House 0      |4000                    |3                    |400000          |
|  House 1      |3000                    |2                    |310000          |
|  House 2      |3800                    |3                    |375000          |
|  House 3      |3200                    |2                    |315000          |
|  House 4      |3542                    |4                    |350000          |
|  House 5      |2348                    |2                    |250000          |
|  House 6      |2987                    |3                    |300000          |
|  House 7      |4300                    |4                    |450000          |
|  House 8      |3342                    |4                    |360000          |
|  House 9      |3000                    |3                    |320000          |
</code></p>

<p>Above is some data I made up about ten sample houses that were sold. Each row represents a house with square footage in column two, the number of bathrooms in column three, and price in the last column.</p>

<p>```
require &lsquo;matrix&rsquo;</p>

<p>housing_data = Matrix[[1,4000,3],</p>

<pre><code>                  [1,3000,2], 
                  [1,3800,3], 
                  [1,3200,2], 
                  [1,3542,4], 
                  [1,2348,2],
                  [1,2987,3],
                  [1,4300,4],
                  [1,3342,4],
                  [1,3000,3]
                ]
</code></pre>

<p>housing_prices = Matrix[[400000],</p>

<pre><code>                    [310000],
                    [375000],
                    [315000],
                    [350000],
                    [250000],
                    [300000],
                    [450000],
                    [360000],
                    [320000]
                    ]
</code></pre>

<p>```</p>

<p> Here we enter the data from the table into two matrices. Matrices can be instantiated in a variety of different ways. I chose a straightforward way of simply listing out the rows as nested arrays. Each row represents a house with square footage in column 1 (the second column since ruby indexes columns from 0) and the number of bathrooms in column 2. The constant value in column 0 is necessary for the calculation of the constant c from our previous equation. The second matrix contains the housing prices. These two matrices are all we need for our calculations.</p>

<p>```ruby
x_t = housing_data.transpose</p>

<p> => Matrix[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],</p>

<pre><code>        [4000, 3000, 3800, 3200, 3542, 2348, 2987, 4300, 3342, 3000], 
        [3, 2, 3, 2, 4, 2, 3, 4, 4, 3]] 
</code></pre>

<p>```</p>

<p> Ruby has a useful function that will transpose a matrix for you, as you can see above.</p>

<p>```ruby
 x_t_x = x_t * housing_data</p>

<p>  => Matrix[[10, 33519, 30],</p>

<pre><code>        [33519, 115320001, 103193], 
        [30, 103193, 96]] 
</code></pre>

<p>```</p>

<p> The standard operators of <code>*, +, -, /,</code> and <code>**</code> perform the corresponding operations on matrices.
```ruby
 x_t_x.inverse</p>

<p>  => Matrix[[(421924847/108574934), (-61017/54287467), (-673863/108574934)],</p>

<pre><code>        [(-61017/54287467), (30/54287467), (-13180/54287467)], 
        [(-673863/108574934), (-13180/54287467), (29676649/108574934)]] 
</code></pre>

<p><code>
  The inverse method will invert a matrix for you.
</code>ruby
w = (x_t_x.inverse * x_t) * housing_prices</p>

<p> => Matrix[[(1018615352500/54287467)],</p>

<pre><code>        [(4850790000/54287467)], 
        [(447540942500/54287467)]] 
</code></pre>

<p>```</p>

<p>Those fractions are pretty huge, so let&rsquo;s iterate through the coefficient matrix and change them into integers to get a better idea of what&rsquo;s going on.</p>

<p>```
w.collect do |i|</p>

<pre><code>i.to_f.round(1)
</code></pre>

<p>end</p>

<p>=> Matrix[[18763.36],</p>

<pre><code>      [89.35], 
      [8243.91]] 
</code></pre>

<p>```</p>

<p><code>Matrix.each</code> reads left to right, then down the rows by default, but you can also specify options, for instance only reading down the diagonal (<code>row index == column index</code>). Since here we only have a simple [1x3] matrix, the default method works just fine. Rather than initializing and returning a new matrix, we can also just use the <code>collect</code> method in place of <code>each</code> to return the new matrix automatically.</p>

<p>And there we have the coefficients in a matrix. As we would expect, both a and b are positive since higher square footage and more bathrooms are both associated with a higher price. Additionally, the magnitude of the coefficient for square footage (row 1) is much smaller than the one for bathrooms, since square footage is a much bigger number than bathroom count.</p>

<p>For more information on using matrices in Ruby checkout the <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/matrix/rdoc/Matrix.html">Ruby Documentation</a> and this <a href="http://rubylearning.com/blog/2013/04/04/ruby-matrix-the-forgotten-library/">helpful post</a> from RubyLearning Blog.</p>
]]></content>
  </entry>
  
</feed>
