<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron&nbsp;School | Blog Title]]></title>
  <link href="http://amyrjohnson.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://amyrjohnson.github.io/"/>
  <updated>2014-07-28T22:52:38-04:00</updated>
  <id>http://amyrjohnson.github.io/</id>
  <author>
    <name><![CDATA[Amy Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making a simple browser game with Sinatra]]></title>
    <link href="http://amyrjohnson.github.io/blog/2014/06/27/making-a-simple-browser-game-with-sinatra/"/>
    <updated>2014-06-27T10:05:43-04:00</updated>
    <id>http://amyrjohnson.github.io/blog/2014/06/27/making-a-simple-browser-game-with-sinatra</id>
    <content type="html"><![CDATA[<p>This post details how I made a simple tic-tac-toe game using Sinatra.</p>

<p>The first step is creating the code that contains the logic of the game. There are a ton of different ways to do this, and Sinatra doesn&rsquo;t care which way you choose. I decided to make a game class, a board class, and a player class. The game class contains the logic pertaining to turns and the running of the game, initialized with an empty board and two players. The board class stores the gameboard as a 3x3 matrix, updates itself with every turn, and determines when the game has ended in a win, loss, or tie. The player class stores the player attributes like name and marker.</p>

<p>The next step is to move the Ruby logic into a Sinatra application. To make things a little easier, I used <a href="https://github.com/ashleygwilliams/ratpack">Ratpack</a>, a Sinatra boilerplate by <a href="http://about.me/ashley_williams">Ashley Williams</a> with support for activerecord, sqlite, and twitter bootstrap (even though we won&rsquo;t be using the database functionality for this application). In the Ratpack schema the models live in the <code>lib</code> directory.</p>

<p>Now we can ignore our tic-tac-toe logic for a little bit and get our pages set up. First we need to define a class that inherits from Sinatra so that we can use all of Sinatra&rsquo;s functionality in our application. Next create the routes. Each page needs a route in order to render, which we establish here with <code>get</code> statements.</p>

<p>```ruby</p>

<h1>app.rb</h1>

<p>module TicTacToeProject
  class App &lt; Sinatra::Application</p>

<pre><code>#routes
get '/' do
  erb :index
end

get '/play' do 
  erb :play
end
</code></pre>

<p>```</p>

<p>The <code>erb :filename</code> statements are telling Sinatra what to render. In this case that&rsquo;s the erb files from my views folder. In order to make a board show up in the browser, I need to display each square from my board in my html, which is easy to do using erb. I chose to format the board as three rows with three columns each, but you could just as easily use a table or some other method.</p>

<p>```html</p>

<!-- views/play.erb -->




<p><div class="board">
  <div class="row center"></p>

<pre><code>&lt;div class="col-md-4"&gt;
  &lt;h2&gt;&lt;%= game.square(0,0) %&gt;&lt;/h2&gt; &lt;!-- returns the value in square [0,0] --&gt;
&lt;/div&gt;
&lt;div class="col-md-4 v"&gt;
  &lt;h2&gt;&lt;%= game.square(0,1) %&gt;&lt;/h2&gt;
</code></pre>

<p>   </div></p>

<pre><code>&lt;div class="col-md-4"&gt;
  &lt;h2&gt;&lt;%= game.square(0,2) %&gt;&lt;/h2&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
```</p>

<p>The only problem is, this erb file has no idea what <code>game</code> is. I need to pass the instance of my game class in my route in order for my views to render it. That looks something like this:</p>

<p>```ruby</p>

<h1>app.rb</h1>

<p>module TicTacToeProject
  class App &lt; Sinatra::Application</p>

<pre><code>@@game = PlayGame.new

#routes
get '/' do
  @game = @@game
  erb :index
end

get '/play' do 
  @game = @@game
  erb :play
end
</code></pre>

<p>```</p>

<p>Once I&rsquo;ve created views and routes for all my pages I&rsquo;m most of the way there, but how do I get input from the user to allow them to play the game? One simple way to receive input from a user and store it for access later is to include a form in the view.</p>

<p>```html
<!-- views/play.erb --></p>

<pre><code>  &lt;form action="/move" method="get"&gt;
    &lt;input type="text" name="move"&gt;
    &lt;input type="Submit" value="Play"&gt;
  &lt;/form&gt;
</code></pre>

<p>```</p>

<p>The text input of the form, which I named &ldquo;move&rdquo;, is stored in Sinatra&rsquo;s params hash automatically. I can access whatever the user typed elsewhere in my program using the <code>params[:move]</code> variable. Now I can update the board with the player&rsquo;s move before loading the erb in my route.</p>

<p>```ruby</p>

<h1>app.rb</h1>

<pre><code>get '/move' do
  @@game.play(params["move"]) #updates the gameboard with the player's chosen move
  @game = @@game
  erb :move
end
</code></pre>

<p>```
 We&rsquo;re almost done! Now we can get a move from the player, update the board, and render a page displaying the updated board. However, if you were to run the code using the Shotgun gem you&rsquo;d soon discover a problem. Every time the player moves the board will update, but when the player goes to make a second move they&rsquo;ll find their previous move has been erased and the board is blank! The reason for this is that every time Shotgun rereads the Sinatra application to refresh the content it generates a new instance of the class App. So every time it runs, it creates a new instance of the PlayGame class, making a new game rather than updating an in-progress game. Try using Rackup instead, and the game should work as intended.</p>

<p>And now we have a working game! Fix up the views with twitter bootstrap, and we&rsquo;re all done. You can check out my finished version at <a href="amystictactoegame.herokuapp.com">amystictactoegame.herokuapp.com</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Matrices in Ruby]]></title>
    <link href="http://amyrjohnson.github.io/blog/2014/06/11/my-first-post-on-octopress/"/>
    <updated>2014-06-11T13:05:08-04:00</updated>
    <id>http://amyrjohnson.github.io/blog/2014/06/11/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Ruby has a matrix library that can be used to do simple linear algebra. The Matrix class defines useful methods like transpose, rank, and determinant. This is nice, because a lot of practical problems can be formulated in terms of linear algebra. Say that we have the following data about recently sold homes:</p>

<table>
<thead>
<tr>
<th> Table  </th>
<th align="left"> Square Footage </th>
<th align="left"> # Bathrooms   </th>
<th align="left"> Price </th>
</tr>
</thead>
<tbody>
<tr>
<td>House 0 </td>
<td align="left">4000            </td>
<td align="left">3              </td>
<td align="left">400000 </td>
</tr>
<tr>
<td>House 1 </td>
<td align="left">3000            </td>
<td align="left">2              </td>
<td align="left">310000 </td>
</tr>
<tr>
<td>House 2 </td>
<td align="left">3800            </td>
<td align="left">3              </td>
<td align="left">375000  </td>
</tr>
<tr>
<td>House 3 </td>
<td align="left">3200            </td>
<td align="left">2              </td>
<td align="left">315000 </td>
</tr>
<tr>
<td>House 4 </td>
<td align="left">3542            </td>
<td align="left">4              </td>
<td align="left">350000 </td>
</tr>
<tr>
<td>House 5 </td>
<td align="left">2348            </td>
<td align="left">2              </td>
<td align="left">250000 </td>
</tr>
<tr>
<td>House 6 </td>
<td align="left">2987            </td>
<td align="left">3              </td>
<td align="left">300000 </td>
</tr>
<tr>
<td>House 7 </td>
<td align="left">4300            </td>
<td align="left">4              </td>
<td align="left">450000 </td>
</tr>
<tr>
<td>House 8 </td>
<td align="left">3342            </td>
<td align="left">4              </td>
<td align="left">360000 </td>
</tr>
<tr>
<td>House 9 </td>
<td align="left">3000            </td>
<td align="left">3              </td>
<td align="left">320000 </td>
</tr>
</tbody>
</table>


<br>


<p>The data has, for each house, the square footage, number of bathrooms, and the price that the house sold for. If you wanted to predict what price another house (not in this data set) might sell for, and you knew its size and bathroom count, you could use the Matrix class to perform a linear regression on the data.</p>

<p>In linear regression we attempt to express our dependent variable (in this case, housing price), as a linear combination of the independent variables (bathrooms and square footage) plus some constant.</p>

<p><strong><center>f(x,y) = ax + by + c</center></strong></p>

<p>For any given triplet of datapoints (square footage, number of bathrooms, and price), the difference between the actual price and the price predicted by our equation, squared is the pointwise error. In order to determine the values of a, b, and c that make the most sense, we choose the values that minimize the total average squared error. If the data can be expressed as an matrix X such that X<sup>T</sup>X is invertible, there is an easy formula to get the right values:</p>

<p><strong><center>w = (X<sup>T</sup>X)<sup>-1</sup>X<sup>T</sup>b</center></strong></p>

<p>where w is the matrix containing the coefficients <code>a</code>, <code>b</code>, and <code>c</code>, <code>X</code> represents the dependent variable matrix, and <code>b</code> represents the independent variable matrix.</p>

<p>With the Ruby matrix class these manipulations will be easy. Creating matrices in Ruby is simple. First add a line to require the matrix library, and you&rsquo;re ready to get started. Ruby stores each matrix as an array of rows. Just like arrays, the indices of matrix rows and columns start at zero. Don&rsquo;t forget that all the rows must be the same length for the matrix to be valid.</p>

<p>Here we enter the data from the table into two matrices. Matrices can be instantiated in a variety of ways. I chose to simply list out the rows as nested arrays, and unless specified otherwise that&rsquo;s what Ruby assumes the input will be. Each row represents a house with square footage in column 1 (the second column since ruby indexes columns from 0) and the number of bathrooms in column 2. The constant value in column 0 is necessary for the calculation of the constant c from our previous equation. The second matrix contains the housing prices. These two matrices are all we need for our calculations.</p>

<p>```
require &lsquo;matrix&rsquo;</p>

<p>housing_data = Matrix[[1,4000,3],</p>

<pre><code>                  [1,3000,2], 
                  [1,3800,3], 
                  [1,3200,2], 
                  [1,3542,4], 
                  [1,2348,2],
                  [1,2987,3],
                  [1,4300,4],
                  [1,3342,4],
                  [1,3000,3]
                ]
</code></pre>

<p>housing_prices = Matrix[[400000],</p>

<pre><code>                    [310000],
                    [375000],
                    [315000],
                    [350000],
                    [250000],
                    [300000],
                    [450000],
                    [360000],
                    [320000]
                    ]
</code></pre>

<p><code>``
 So, to get started on our handy equation, let's transpose</code>X`, our housing data matrix. Ruby has a useful function that will transpose a matrix for you, as you can see above.</p>

<p>```ruby
x_t = housing_data.transpose</p>

<p> => Matrix[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],</p>

<pre><code>        [4000, 3000, 3800, 3200, 3542, 2348, 2987, 4300, 3342, 3000], 
        [3, 2, 3, 2, 4, 2, 3, 4, 4, 3]] 
</code></pre>

<p><code>``
 Next we multiply the trasposed matrix by the original housing data matrix. The standard operators of</code>*, +, &ndash;, /,<code>and</code>**` perform the corresponding operations on matrices.</p>

<p>```ruby
 x_t_x = x_t * housing_data</p>

<p>  => Matrix[[10, 33519, 30],</p>

<pre><code>        [33519, 115320001, 103193], 
        [30, 103193, 96]] 
</code></pre>

<p>```</p>

<p>We can invert the resulting matrix using the inverse method.</p>

<p>```ruby
 x_t_x.inverse</p>

<p>  => Matrix[[(421924847/108574934), (-61017/54287467), (-673863/108574934)],</p>

<pre><code>        [(-61017/54287467), (30/54287467), (-13180/54287467)], 
        [(-673863/108574934), (-13180/54287467), (29676649/108574934)]] 
</code></pre>

<p>```
Finally, we can get the coefficients matrix with two more multiplication operations. Those fractions look pretty unwieldy, so let&rsquo;s iterate through the matrix and change them to floating point numbers to get a better idea of what&rsquo;s going on.</p>

<p>```ruby
w = (x_t_x.inverse * x_t) * housing_prices</p>

<p> => Matrix[[(1018615352500/54287467)],</p>

<pre><code>        [(4850790000/54287467)], 
        [(447540942500/54287467)]] 
</code></pre>

<p><code>``
</code>Matrix.each<code>reads left to right, then down the rows by default, but you can also specify options, for instance only reading down the diagonal (</code>row index == column index<code>). Since here we only have a simple [3x1] matrix, the default method works just fine. Rather than initializing and returning a new matrix, we can also just use the</code>collect<code>method in place of</code>each` to return the new matrix automatically.</p>

<p>```
w.collect do |i|</p>

<pre><code>i.to_f.round(2)
</code></pre>

<p>end</p>

<p>=> Matrix[[18763.36],</p>

<pre><code>      [89.35], 
      [8243.91]] 
</code></pre>

<p>```</p>

<p>And there we have the coefficients in a matrix. The constant, c, is in row 0, the square footage coefficient, b, is in row 1, and the bathroom coeffient, a, is in row 2 (note that this mirrors the column structure of the original data matrix). As we would expect, both a and b are positive since higher square footage and more bathrooms are both associated with a higher price. Additionally, the magnitude of the coefficient for square footage (row 1) is much smaller than the one for bathrooms, since square footage is a much bigger number than bathroom count. Let&rsquo;s revisit our original example of a 3500 square foot house with 3 bathrooms and determine the predicted price.</p>

<p>```
f(x,y) = 8243.91<em>3 + 89.35</em>3500 + 18763.36</p>

<p> => 356220.08999999997
```
Our equation predicts that this house would sell for $356,220, which makes sense compared to the other points in our data set.</p>

<p>For more information on using matrices in Ruby checkout the <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/matrix/rdoc/Matrix.html">Ruby Documentation</a> and this <a href="http://rubylearning.com/blog/2013/04/04/ruby-matrix-the-forgotten-library/">helpful post</a> from RubyLearning Blog.</p>
]]></content>
  </entry>
  
</feed>
